# -*- coding: utf-8 -*-
"""praktikum5_ML_iris

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LVTmxDfyOL-TtGmnXZwR6L2Hc8iu4gZs
"""

from google.colab import drive
drive.mount('/content/gdrive')
path = "/content/gdrive/MyDrive/praktikum5_ML.csv/dataset"

# Pembuatan dan pelatihan model Decision Tree
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Membaca file csv menggunakan pandas
df = pd.read_csv(path + '/data/iris.csv')
df.head()

# Menampilkan Informasi Detail Dengan df.info()
df.info()

# Cek Missing Value
df.isnull().sum()

# Cek Duplikat
df.duplicated().sum()

# Menghapus data duplikat
df=df.drop_duplicates()

# Cek Duplicate Ulang Setelah Menghapus
df.duplicated().sum()

# Visualisasi Distribusi Label Target (Species)
plt.figure(figsize=(6,4))
sns.countplot(x='Species', data=df)
plt.title('Distribusi label Species')
plt.xticks(rotation=15)
plt.show()

# Mapping label -> kode numerik untuk target (Species)
species_cat = df['Species'].astype('category')   # ubah jadi kategori
species_classes = list(species_cat.cat.categories)  # simpan urutan label aslinya
df['Species'] = species_cat.cat.codes  # ubah label string jadi angka

# Tampilkan hasil mapping
print("Mapping Label -> Kode:")
for i, label in enumerate(species_classes):
    print(f"{label} = {i}")

# Tampilkan 5 data teratas untuk verifikasi
df.head()

# Kolerasi
plt.figure(figsize=(6,4))
sns.heatmap(df.select_dtypes(include=['number']).corr(), annot=True, cmap='coolwarm')
plt.title('Kolerasi Fitur')
plt.show()

# Memilih fitur dan target untuk dataset Iris
feature_cols = ['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm']

X = df[feature_cols]
y = df['Species']

# Membagi dataset
X_train, X_test, y_train, y_test = train_test_split(
    X,y,
    test_size=0.2,
    random_state=42,
    stratify=y
)
len(X_train), len(X_test)

# Membangun Model
dt = DecisionTreeClassifier(
    criterion = 'gini',
    max_depth = 4,
    random_state = 42
)
dt.fit(X_train, y_train)

# Evluasi
y_pred = dt.predict(X_test)

print("Akurasi:", round(accuracy_score(y_test, y_pred)*100, 2), "%")
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(
  y_test, y_pred, target_names=species_classes
))

# Visualisasi Model
plt.figure(figsize=(22,10))
plot_tree(
    dt,
    feature_names=feature_cols,
    class_names=species_classes, # kembali ke nama kelas asli
    filled=True,
    fontsize=9
)
plt.title("Decision Tree - Klarifikasi Species")
plt.show()

# Fitur yg penting

imp = pd.Series(dt.feature_importances_, index=feature_cols).sort_values(ascending=False)
plt.figure(figsize=(7,4))
sns.barplot(x=imp, y=imp.index)
plt.title("Feature Importance(Decision Tree)")
plt.xlabel("Importance")
plt.ylabel("Fitur")
plt.show()

imp

scores = {}
for d in range(2, nine :=9):
    m = DecisionTreeClassifier(max_depth=d, random_state=42)
    m.fit(X_train, y_train)
    scores[d] = accuracy_score(y_test, m.predict(X_test))

scores
best_d = max(scores, key=scores.get)
print("Best max_depth:", best_d, "| Acc:", round(scores[best_d]*100,2), "%")

