# -*- coding: utf-8 -*-
"""praktikum5_ML.csv

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q_R6rp5NRLAFf-Oj9LrejS_Yl28ahJGl
"""

from google.colab import drive
drive.mount('/content/gdrive')
path = "/content/gdrive/MyDrive/praktikum5_ML.csv/dataset"

# 1. Import Library
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Membaca file csv menggunakan pandas
df = pd.read_csv(path + '/data/stunting_wasting_dataset.csv')
df.head()

# Menampilkan Informasi Detail Dengan df.info()
df.info()

# Cek Missing Value
df.isnull().sum()

# Cek Duplikat
df.duplicated().sum()

# Menghapus data duplikat
df=df.drop_duplicates()

# Cek Duplicate Ulang Setelah Menghapus
df.duplicated().sum()

# Mengubah Nama Kolom (Rename columns)
df = df.rename(columns={
    'Jenis Kelamin':'jenis_kelamin',
    'Umur (bulan)':'umur_bulan',
    'Tinggi Badan (cm)':'tinggi_cm',
    'Berat Badan (kg)':'berat_kg',
    'Stunting':'stunting',
    'Wating':'wasting'
})

df.info()

# Visualisasi Distribusi Label Target (stunting)
plt.figure(figsize=(6,4))
sns.countplot(x='stunting', data=df)
plt.title('Distribusi label Stunting')
plt.xticks(rotation=15)
plt.show()

# Mapping label -> kode untuk target
stunting_cat = df['stunting'].astype('category')
stunting_classes = list(stunting_cat.cat.categories) #urutan kelas
df['stunting'] = stunting_cat.cat.codes    # y numerik

# fitur kategorikal lain (jenis_kelamin, wasting) -> kode juga
for col in ['jenis_kelamin', 'wasting']:
  if col in df.columns:
    df[col] = df[col].astype('category').cat.codes

df.head()

# Kolerasi
plt.figure(figsize=(6,4))
sns.heatmap(df.select_dtypes(include=['number']).corr(), annot=True, cmap='coolwarm')
plt.title('Kolerasi Fitur')
plt.show()

# Memilih fitur dan target
feature_cols = ['umur_bulan', 'tinggi_cm', 'berat_kg', 'Wasting']
X = df[feature_cols]
y = df['stunting']

# Membagi dataset
X_train, X_test, y_train, y_test = train_test_split(
    X,y,
    test_size=0.2,
    random_state=42,
    stratify=y
)
len(X_train), len(X_test)

from sklearn.preprocessing import LabelEncoder

# Ubah kolom bertipe object menjadi numerik agar bisa dibaca model
le = LabelEncoder()
for col in X_train.columns:
    if X_train[col].dtype == 'object':
        X_train[col] = le.fit_transform(X_train[col])

for col in X_test.columns:
    if X_test[col].dtype == 'object':
        X_test[col] = le.fit_transform(X_test[col])

# Sekarang baru fit model
dt.fit(X_train, y_train)

# Evluasi
y_pred = dt.predict(X_test)

print("Akurasi:", round(accuracy_score(y_test, y_pred)*100, 2), "%")
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(
  y_test, y_pred, target_names=stunting_classes
))

# Visualisasi Model
plt.figure(figsize=(22,10))
plot_tree(
    dt,
    feature_names=feature_cols,
    class_names=stunting_classes, # kembali ke nama kelas asli
    filled=True,
    fontsize=9
)
plt.title("Decision Tree - Klarifikasi Stunting")
plt.show()

# Fitur yg penting

imp = pd.Series(dt.feature_importances_, index=feature_cols).sort_values(ascending=False)
plt.figure(figsize=(7,4))
sns.barplot(x=imp, y=imp.index)
plt.title("Feature Importance(Decision Tree)")
plt.xlabel("Importance")
plt.ylabel("Fitur")
plt.show()

imp

scores = {}
for d in range(2, nine :=9):
    m = DecisionTreeClassifier(max_depth=d, random_state=42)
    m.fit(X_train, y_train)
    scores[d] = accuracy_score(y_test, m.predict(X_test))

scores
best_d = max(scores, key=scores.get)
print("Best max_depth:", best_d, "| Acc:", round(scores[best_d]*100,2), "%")

